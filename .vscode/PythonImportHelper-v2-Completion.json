[
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "PyPDFLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "RecursiveCharacterTextSplitter",
        "importPath": "langchain.text_splitter",
        "description": "langchain.text_splitter",
        "isExtraImport": true,
        "detail": "langchain.text_splitter",
        "documentation": {}
    },
    {
        "label": "ChatOllama",
        "importPath": "langchain_ollama",
        "description": "langchain_ollama",
        "isExtraImport": true,
        "detail": "langchain_ollama",
        "documentation": {}
    },
    {
        "label": "OllamaEmbeddings",
        "importPath": "langchain_ollama",
        "description": "langchain_ollama",
        "isExtraImport": true,
        "detail": "langchain_ollama",
        "documentation": {}
    },
    {
        "label": "Chroma",
        "importPath": "langchain_chroma",
        "description": "langchain_chroma",
        "isExtraImport": true,
        "detail": "langchain_chroma",
        "documentation": {}
    },
    {
        "label": "OllamaLLM",
        "importPath": "langchain_ollama.llms",
        "description": "langchain_ollama.llms",
        "isExtraImport": true,
        "detail": "langchain_ollama.llms",
        "documentation": {}
    },
    {
        "label": "PromptTemplate",
        "importPath": "langchain.prompts",
        "description": "langchain.prompts",
        "isExtraImport": true,
        "detail": "langchain.prompts",
        "documentation": {}
    },
    {
        "label": "ChatPromptTemplate",
        "importPath": "langchain.prompts",
        "description": "langchain.prompts",
        "isExtraImport": true,
        "detail": "langchain.prompts",
        "documentation": {}
    },
    {
        "label": "ConversationBufferMemory",
        "importPath": "langchain.memory",
        "description": "langchain.memory",
        "isExtraImport": true,
        "detail": "langchain.memory",
        "documentation": {}
    },
    {
        "label": "StrOutputParser",
        "importPath": "langchain_core.output_parsers",
        "description": "langchain_core.output_parsers",
        "isExtraImport": true,
        "detail": "langchain_core.output_parsers",
        "documentation": {}
    },
    {
        "label": "HumanMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "AIMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "ChatMessageHistory",
        "importPath": "langchain_community.chat_message_histories",
        "description": "langchain_community.chat_message_histories",
        "isExtraImport": true,
        "detail": "langchain_community.chat_message_histories",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "importPath": "sklearn.metrics.pairwise",
        "description": "sklearn.metrics.pairwise",
        "isExtraImport": true,
        "detail": "sklearn.metrics.pairwise",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "reviews",
        "importPath": "reviewBot",
        "description": "reviewBot",
        "isExtraImport": true,
        "detail": "reviewBot",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "reviewBot",
        "description": "reviewBot",
        "peekOfCode": "def home():\n    return {\n        \"hello\"\n    }\n@app.post('/ai')\nasync def ai(request:Request):\n    body = await request.json()\n    print(\"Request recieved\")\n    reviews = body['reviews']\n    for no,review in enumerate(reviews):",
        "detail": "reviewBot",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "reviewBot",
        "description": "reviewBot",
        "peekOfCode": "llm = ChatOllama(\n    model=\"llama3.1\",\n    temperature=0.7,\n)\nprint(\"ollama loaded\")\nembedding_model = OllamaEmbeddings(model=\"llama3.1\")\nprint(\"embeddings model created\")\nparser = StrOutputParser()\napp = FastAPI()\ntext_splitter = RecursiveCharacterTextSplitter(",
        "detail": "reviewBot",
        "documentation": {}
    },
    {
        "label": "embedding_model",
        "kind": 5,
        "importPath": "reviewBot",
        "description": "reviewBot",
        "peekOfCode": "embedding_model = OllamaEmbeddings(model=\"llama3.1\")\nprint(\"embeddings model created\")\nparser = StrOutputParser()\napp = FastAPI()\ntext_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=1024, chunk_overlap=200, length_function=len\n)\nchat_prompt = PromptTemplate.from_template(\n    \"\"\"\n        you are a professional review system , your task is to reply to the human reviews after analysing the human sentiement from the input given.",
        "detail": "reviewBot",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "reviewBot",
        "description": "reviewBot",
        "peekOfCode": "parser = StrOutputParser()\napp = FastAPI()\ntext_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=1024, chunk_overlap=200, length_function=len\n)\nchat_prompt = PromptTemplate.from_template(\n    \"\"\"\n        you are a professional review system , your task is to reply to the human reviews after analysing the human sentiement from the input given.\n        reply in a warm and professional manner just like how a professional human hotel manager would reply .\n        Input :{input}",
        "detail": "reviewBot",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "reviewBot",
        "description": "reviewBot",
        "peekOfCode": "app = FastAPI()\ntext_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=1024, chunk_overlap=200, length_function=len\n)\nchat_prompt = PromptTemplate.from_template(\n    \"\"\"\n        you are a professional review system , your task is to reply to the human reviews after analysing the human sentiement from the input given.\n        reply in a warm and professional manner just like how a professional human hotel manager would reply .\n        Input :{input}\n    \"\"\"",
        "detail": "reviewBot",
        "documentation": {}
    },
    {
        "label": "text_splitter",
        "kind": 5,
        "importPath": "reviewBot",
        "description": "reviewBot",
        "peekOfCode": "text_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=1024, chunk_overlap=200, length_function=len\n)\nchat_prompt = PromptTemplate.from_template(\n    \"\"\"\n        you are a professional review system , your task is to reply to the human reviews after analysing the human sentiement from the input given.\n        reply in a warm and professional manner just like how a professional human hotel manager would reply .\n        Input :{input}\n    \"\"\"\n)",
        "detail": "reviewBot",
        "documentation": {}
    },
    {
        "label": "chat_prompt",
        "kind": 5,
        "importPath": "reviewBot",
        "description": "reviewBot",
        "peekOfCode": "chat_prompt = PromptTemplate.from_template(\n    \"\"\"\n        you are a professional review system , your task is to reply to the human reviews after analysing the human sentiement from the input given.\n        reply in a warm and professional manner just like how a professional human hotel manager would reply .\n        Input :{input}\n    \"\"\"\n)\nreview_response_template = ChatPromptTemplate.from_messages(\n    [\n        (",
        "detail": "reviewBot",
        "documentation": {}
    },
    {
        "label": "review_response_template",
        "kind": 5,
        "importPath": "reviewBot",
        "description": "reviewBot",
        "peekOfCode": "review_response_template = ChatPromptTemplate.from_messages(\n    [\n        (\n            \"system\",\n            \"You are an AI assistant for a restaurant. Your task is to reply to customer reviews \"\n            \"as if you are a human, in a warm, professional, and personal tone. \"\n            \"Analyze the review and determine if it is positive, neutral, or negative.\"\n            \"Make sure each response sounds unique and human-like. Don't sound robotic.\",\n        ),\n        (",
        "detail": "reviewBot",
        "documentation": {}
    },
    {
        "label": "restaurant_reviews",
        "kind": 5,
        "importPath": "reviewBot",
        "description": "reviewBot",
        "peekOfCode": "restaurant_reviews = {\n    \"restaurant_name\": \"The Gourmet Spot\",\n    \"reviews\": [\n        {\n            \"review_id\": 1,\n            \"customer_name\": \"John Doe\",\n            \"rating\": 5,\n            \"review_text\": \"The food was exceptional! Great ambiance and the staff were very attentive. Will definitely come back!\",\n            \"date\": \"2023-09-12\",\n        },",
        "detail": "reviewBot",
        "documentation": {}
    },
    {
        "label": "chain",
        "kind": 5,
        "importPath": "reviewBot",
        "description": "reviewBot",
        "peekOfCode": "chain = review_response_template | llm | parser\n# while 1:\n#     name = input(\"Enter the name :\")\n#     if name.lower() == \"bye\":\n#         break\n#     review = input(\"Enter the review :\")\n#     response = chain.invoke({\"review_content\": review, \"name\": name})\n#     print(response)\nreviews = restaurant_reviews[\"reviews\"]\nresponse_json=[]",
        "detail": "reviewBot",
        "documentation": {}
    },
    {
        "label": "reviews",
        "kind": 5,
        "importPath": "reviewBot",
        "description": "reviewBot",
        "peekOfCode": "reviews = restaurant_reviews[\"reviews\"]\nresponse_json=[]\n# for no,review in enumerate(reviews):\n#     name = review[\"customer_name\"]\n#     rating = review[\"rating\"]\n#     text = review[\"review_text\"]\n#     print(\"{\\n\",\"name:\",name,\"\\n\",\"rating:\",rating,\"\\n\",\"review:\",text,\"\\n\",\"}\")\n#     response = chain.invoke({\"review_content\":text,\"name\":name,\"rating\":rating})\n#     response_json.append({\n#         \"id\":review[\"review_id\"],",
        "detail": "reviewBot",
        "documentation": {}
    },
    {
        "label": "examples",
        "kind": 5,
        "importPath": "tempCodeRunnerFile",
        "description": "tempCodeRunnerFile",
        "peekOfCode": "examples = {\n#     \"contextual\": [\"good\", \"bad\", \"wait\", \"long\", \"wouldnt reccomend\"],\n#     \"casual\": [\"hi\", \"hello\", \"hey\", \"oh\"],\n# }\n# threshold = 1.4\n# legal_embeddings = embedding_model.embed_documents(examples[\"contextual\"])\n# casual_embeddings = embedding_model.embed_documents(examples[\"casual\"])\n# def classify_query(query):\n#     # Embed the query\n#     query_embedding = embedding_model.embed_documents([query])",
        "detail": "tempCodeRunnerFile",
        "documentation": {}
    }
]